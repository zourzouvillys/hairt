package io.zrz.hai.runtime.engine;

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import javax.json.Json;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonGeneratorFactory;

import io.zrz.hai.runtime.ZValue;
import lombok.Getter;

/**
 * receives results generated by execution, and returns them, to the client as
 * they are available, and based on client configuration.
 *
 * The primary result set is returned when all immediate dependencies are
 * resolved. After that, deferred results are generated.
 *
 * The results are delivered with an identifier that indicates where in the
 * output set they are.
 *
 * as processing progresses, branches are opened on points in the result set.
 *
 */

public class EJsonGeneratorResultCollector implements EHistoricResultCollector, AutoCloseable {

  private final JsonGenerator out;

  @Getter
  private final Map<String, String> results = new HashMap<>();

  public EJsonGeneratorResultCollector(JsonGenerator out) {
    this.out = out;
  }

  @Override
  public void write(String name, ZValue val) {
    this.out.write(name, val.toJson());
  }

  @Override
  public void write(String outputName, String value) {
    this.out.write(outputName, value);
  }

  @Override
  public void write(String outputName, int count) {
    this.out.write(outputName, count);
  }

  @Override
  public void writeNull(String name) {
    this.out.writeNull(name);
  }

  @Override
  public void writeStartArray(String outputName) {
    this.out.writeStartArray(outputName);
  }

  @Override
  public void writeStartObject() {
    this.out.writeStartObject();
  }

  @Override
  public void writeEnd() {
    this.out.writeEnd();
  }

  @Override
  public void writeStartObject(String outputName) {
    this.out.writeStartObject(outputName);
  }

  @Override
  public void writeStartData() {
    this.out.writeStartObject();
    this.out.writeStartObject("data");
  }

  @Override
  public void writeEndData() {
    this.out.writeEnd();
    this.out.writeEnd();
  }

  private static JsonGeneratorFactory jwf;

  static {
    final Map<String, Boolean> config = new HashMap<>();
    config.put(JsonGenerator.PRETTY_PRINTING, true);
    jwf = Json.createGeneratorFactory(config);
  }

  public static EJsonGeneratorResultCollector create(OutputStream out) {
    final JsonGenerator jg = jwf.createGenerator(out);
    return new EJsonGeneratorResultCollector(jg);
  }

  @Override
  public void close() {

    this.out.flush();
    this.out.close();

  }

}
