package io.zrz.hai.runtime.engine.steps;

import java.util.HashMap;
import java.util.Map;

import io.zrz.hai.haiscript.IndentPrintWriter;
import lombok.Getter;

/**
 * an output result shape.
 *
 * a scalar selection is used for all state values fetched from a node
 * expression, scalar outputs, and scalars that are generated by traversing
 * links or connection indexes.
 *
 * a nested result contains another EResultIntent, and describes the shape of
 * result that will be applied to an edge scan.
 *
 * fragments/spreads will be declared as normal results, but will not be
 * fulfilled if the type does not match.
 *
 * a result intent is generated for the root node, and one for each edge scan.
 *
 */

public class EResultIntent {

  @lombok.Value(staticConstructor = "of")
  public static class Value {

    String path;

    EExpr type;

  }

  @lombok.Value(staticConstructor = "of")
  public static class Nested {

    String path;

    EResultIntent intent;

    EEdgeScanStep scan;

  }

  @Getter
  private final Map<String, Value> values = new HashMap<>();

  @Getter
  private final Map<String, Nested> nested = new HashMap<>();

  public void add(String path, EExpr type) {
    this.values.put(path, Value.of(path, type));
  }

  public void add(String path, EResultIntent nested, EEdgeScanStep scan) {
    this.nested.put(path, Nested.of(path, nested, scan));
  }

  /**
   *
   */

  public void dump(IndentPrintWriter w) {

    for (final Value v : this.values.values()) {
      w.print(v.getPath());
      w.print(" = ");
      w.println(v.getType());
    }

    for (final Nested v : this.nested.values()) {
      w.print(v.getPath());
      w.print(": ");
      v.getScan().dump(w);
      w.println(" = {");
      w.inc();
      v.getIntent().dump(w);
      w.dec();
      w.println("}");
    }

  }

}
